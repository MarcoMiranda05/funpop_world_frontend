{"ast":null,"code":"import _objectSpread from \"/Users/marcomiranda/Dev/GitHub/funpop_world_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst API = \"http://localhost:3000\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Accepts: \"application/json\"\n};\n\nconst fetchFunkos = () => {\n  return fetch(\"\".concat(API, \"/funkos\")).then(resp => resp.json());\n};\n\nconst login = (username, password) => {\n  return fetch(\"\".concat(API, \"/auth/create\"), {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(res => res.json());\n};\n\nconst getCurrentUser = token => {\n  return fetch(\"\".concat(API, \"/auth/show\"), {\n    headers: _objectSpread({}, headers, {\n      Authorization: token\n    })\n  }).then(res => res.json());\n};\n\nconst createUser = newUser => {\n  debugger;\n  return fetch(\"\".concat(API, \"/api/v1/users\"), {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(newUser)\n  }).then(res => res.json());\n};\n\nexport default {\n  fetchFunkos,\n  login,\n  getCurrentUser,\n  createUser\n};","map":{"version":3,"sources":["/Users/marcomiranda/Dev/GitHub/funpop_world_frontend/src/util/api.js"],"names":["API","headers","Accepts","fetchFunkos","fetch","then","resp","json","login","username","password","method","body","JSON","stringify","res","getCurrentUser","token","Authorization","createUser","newUser"],"mappings":";AAAA,MAAMA,GAAG,GAAG,uBAAZ;AAEA,MAAMC,OAAO,GAAG;AACd,kBAAgB,kBADF;AAEdC,EAAAA,OAAO,EAAE;AAFK,CAAhB;;AAKA,MAAMC,WAAW,GAAG,MAAM;AACxB,SAAOC,KAAK,WAAIJ,GAAJ,aAAL,CAAuBK,IAAvB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAAP;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpC,SAAON,KAAK,WAAIJ,GAAJ,mBAAuB;AACjCW,IAAAA,MAAM,EAAE,MADyB;AAEjCV,IAAAA,OAAO,EAAEA,OAFwB;AAGjCW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAH2B,GAAvB,CAAL,CAIJL,IAJI,CAICU,GAAG,IAAIA,GAAG,CAACR,IAAJ,EAJR,CAAP;AAKD,CAND;;AAQA,MAAMS,cAAc,GAAGC,KAAK,IAAI;AAC9B,SAAOb,KAAK,WAAIJ,GAAJ,iBAAqB;AAC/BC,IAAAA,OAAO,oBAAOA,OAAP;AAAgBiB,MAAAA,aAAa,EAAED;AAA/B;AADwB,GAArB,CAAL,CAEJZ,IAFI,CAECU,GAAG,IAAIA,GAAG,CAACR,IAAJ,EAFR,CAAP;AAGD,CAJD;;AAMA,MAAMY,UAAU,GAAGC,OAAO,IAAI;AAC5B;AACA,SAAOhB,KAAK,WAAIJ,GAAJ,oBAAwB;AAClCW,IAAAA,MAAM,EAAE,MAD0B;AAElCV,IAAAA,OAAO,EAAEA,OAFyB;AAGlCW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeM,OAAf;AAH4B,GAAxB,CAAL,CAIJf,IAJI,CAICU,GAAG,IAAIA,GAAG,CAACR,IAAJ,EAJR,CAAP;AAKD,CAPD;;AASA,eAAe;AACbJ,EAAAA,WADa;AAEbK,EAAAA,KAFa;AAGbQ,EAAAA,cAHa;AAIbG,EAAAA;AAJa,CAAf","sourcesContent":["const API = \"http://localhost:3000\";\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Accepts: \"application/json\"\n};\n\nconst fetchFunkos = () => {\n  return fetch(`${API}/funkos`).then(resp => resp.json());\n};\n\nconst login = (username, password) => {\n  return fetch(`${API}/auth/create`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({ username, password })\n  }).then(res => res.json());\n};\n\nconst getCurrentUser = token => {\n  return fetch(`${API}/auth/show`, {\n    headers: { ...headers, Authorization: token }\n  }).then(res => res.json());\n};\n\nconst createUser = newUser => {\n  debugger;\n  return fetch(`${API}/api/v1/users`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(newUser)\n  }).then(res => res.json());\n};\n\nexport default {\n  fetchFunkos,\n  login,\n  getCurrentUser,\n  createUser\n};\n"]},"metadata":{},"sourceType":"module"}