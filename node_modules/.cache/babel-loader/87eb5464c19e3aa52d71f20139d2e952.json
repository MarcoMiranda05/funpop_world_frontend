{"ast":null,"code":"import _objectSpread from \"/Users/marcomiranda/Dev/GitHub/funpop_world_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst API = \"http://localhost:3000\";\n\nconst fetchFunkos = () => {\n  return fetch(\"\".concat(API, \"/funkos\")).then(resp => resp.json());\n};\n\nconst login = (username, password) => {\n  return fetch(\"\".concat(API, \"/auth/create\"), {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({\n      username,\n      password\n    })\n  }).then(res => res.json());\n};\n\nconst getCurrentUser = token => {\n  return fetch(\"\".concat(API, \"/auth/show\"), {\n    headers: _objectSpread({}, headers, {\n      Authorization: token\n    })\n  }).then(res => res.json());\n};\n\nexport default {\n  fetchFunkos,\n  login,\n  getCurrentUser\n};","map":{"version":3,"sources":["/Users/marcomiranda/Dev/GitHub/funpop_world_frontend/src/util/api.js"],"names":["API","fetchFunkos","fetch","then","resp","json","login","username","password","method","headers","body","JSON","stringify","res","getCurrentUser","token","Authorization"],"mappings":";AAAA,MAAMA,GAAG,GAAG,uBAAZ;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,SAAOC,KAAK,WAAIF,GAAJ,aAAL,CAAuBG,IAAvB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAApC,CAAP;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpC,SAAON,KAAK,WAAIF,GAAJ,mBAAuB;AACjCS,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAEA,OAFwB;AAGjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAH2B,GAAvB,CAAL,CAIJL,IAJI,CAICW,GAAG,IAAIA,GAAG,CAACT,IAAJ,EAJR,CAAP;AAKD,CAND;;AAQA,MAAMU,cAAc,GAAGC,KAAK,IAAI;AAC9B,SAAOd,KAAK,WAAIF,GAAJ,iBAAqB;AAC/BU,IAAAA,OAAO,oBAAOA,OAAP;AAAgBO,MAAAA,aAAa,EAAED;AAA/B;AADwB,GAArB,CAAL,CAEJb,IAFI,CAECW,GAAG,IAAIA,GAAG,CAACT,IAAJ,EAFR,CAAP;AAGD,CAJD;;AAMA,eAAe;AACbJ,EAAAA,WADa;AAEbK,EAAAA,KAFa;AAGbS,EAAAA;AAHa,CAAf","sourcesContent":["const API = \"http://localhost:3000\";\n\nconst fetchFunkos = () => {\n  return fetch(`${API}/funkos`).then(resp => resp.json());\n};\n\nconst login = (username, password) => {\n  return fetch(`${API}/auth/create`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({ username, password })\n  }).then(res => res.json());\n};\n\nconst getCurrentUser = token => {\n  return fetch(`${API}/auth/show`, {\n    headers: { ...headers, Authorization: token }\n  }).then(res => res.json());\n};\n\nexport default {\n  fetchFunkos,\n  login,\n  getCurrentUser\n};\n"]},"metadata":{},"sourceType":"module"}